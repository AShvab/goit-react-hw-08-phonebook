{"version":3,"file":"static/js/525.4ca08276.chunk.js","mappings":"6OAEaA,EAAYC,EAAAA,GAAAA,IAAH,+GAMTC,EAAaD,EAAAA,GAAAA,KAAH,8QAYVE,EAAQF,EAAAA,GAAAA,MAAH,6OAWLG,EAAYH,EAAAA,GAAAA,MAAH,yGAOTI,EAASJ,EAAAA,GAAAA,OAAH,smB,SCAnB,EAhCqB,WACnB,IAAMK,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,SAACP,EAAD,WACE,UAACE,EAAD,CAAYM,SAhBK,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEfN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACN,EAIuCC,aAAa,MAAjD,WACA,SAAChB,EAAD,UAAW,cACX,SAACD,EAAD,CAAOkB,KAAK,OAAOP,KAAK,UACxB,SAACV,EAAD,UAAW,WACX,SAACD,EAAD,CAAOkB,KAAK,QAAQP,KAAK,WACzB,SAACV,EAAD,UAAW,cACX,SAACD,EAAD,CAAOkB,KAAK,WAAWP,KAAK,cAC5B,SAACT,EAAD,CAAQgB,KAAK,SAAb,SAAsB,iBAK3B,E,UClCc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,2BAAO,oBAET,SAAC,EAAD,MAGL,C,qICTDC,EAAAA,EAAAA,SAAAA,QAAyB,wCAGzB,IAAMC,EAAgB,SAAAC,GAClBF,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAA,iBAAwDE,EACzD,EAWUb,GAAWc,EAAAA,EAAAA,IACpB,gBADoC,mCAEpC,WAAOC,EAAaC,GAApB,gGAEsBL,EAAAA,EAAAA,KAAW,gBAAiBI,GAFlD,cAEUE,EAFV,OAIIL,EAAcK,EAAIC,KAAKL,OAJ3B,kBAKWI,EAAIC,MALf,yDAOWF,EAASG,gBAAgB,KAAMC,UAP1C,yDAFoC,yDAkB3BC,GAAQP,EAAAA,EAAAA,IACjB,aADiC,mCAEjC,WAAOC,EAAaC,GAApB,gGAEsBL,EAAAA,EAAAA,KAAW,eAAgBI,GAFjD,cAEUE,EAFV,OAIIL,EAAcK,EAAIC,KAAKL,OAJ3B,kBAKWI,EAAIC,MALf,yDAOWF,EAASG,gBAAgB,KAAMC,UAP1C,yDAFiC,0DAkBbN,EAAAA,EAAAA,IAAiB,cAAD,mCAAgB,WAAOQ,EAAGN,GAAV,0FAE5CL,EAAAA,EAAAA,KAAW,iBAFiC,OA3CpDA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAA8C,GA2CM,wEAM3CK,EAASG,gBAAgB,KAAMC,UANY,wDAAhB,0DAcXN,EAAAA,EAAAA,IACzB,eADyC,mCAEzC,WAAOQ,EAAGN,GAAV,8EAEQO,EAAQP,EAASQ,WAGA,QAFjBC,EAAiBF,EAAMG,KAAKb,OAHpC,yCAOWG,EAASG,gBAAgB,yBAPpC,uBAYIP,EAAca,GAZlB,SAasBd,EAAAA,EAAAA,IAAU,aAbhC,cAaUM,EAbV,yBAcWA,EAAIC,MAdf,2DAgBWF,EAASG,gBAAgB,KAAMC,UAhB1C,0DAFyC,wD","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx","redux/auth/operations.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 80vh;\n`;\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  max-width: 400px;\n  height: 300px;\n  padding: 20px 40px;\n  border-radius: 8px;\n  background: #F9B8C7; \n  box-shadow: 1px 1px 3px 4px rgba(119,  5,  47, 0.7);\n`;\n\nexport const Input = styled.input`\n  border: 0;\n  outline: 0;\n  box-shadow: inset 0 2px 2px rgba(0,0,0,0.2), inset 0 1px 2px rgba(0,0,0,0.2);\n  width: 300px;\n  padding: 12px;\n  border-radius: 20px;\n  background: #faebd7;\n  color: #590042; \n`;\n\nexport const LabelForm = styled.label`\n  font-size: 20px;\n  display: block;\n  margin-bottom: 0; \n  color: #590042; \n`;\n\nexport const Button = styled.button`\n  width: 160px;\n  border-radius: 20px;\n  border: none;\n  color: #590042;\n  background: #cd8b9a;\n  box-shadow: 1px 1px 3px 4px rgba(119,  5,  47, 0.7);\n  margin: 0 auto;\n  margin-top: 10px;\n  padding: 10px 16px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    background: #590042;\n    color: #cd8b9a;\n    box-shadow: 1px 1px 5px 5px rgba(119, 5, 47, 0.9);\n    transform: translateY(-2px);\n\n    &:focus {\n      outline: none;\n      background: #590042;\n      color: #cd8b9a;\n      box-shadow: 0px 0px 2px 3px rgba(119, 5, 47, 0.9);\n    }\n  } \n`\n","import { useDispatch } from 'react-redux';\n\nimport { register } from 'redux/auth/operations';\nimport { Button, Container, Input, LabelForm, StyledForm } from './RegisterForm.styled';\n\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Container>\n      <StyledForm onSubmit={handleSubmit} autoComplete=\"off\">\n      <LabelForm>Username</LabelForm>\n      <Input type=\"text\" name=\"name\" />\n      <LabelForm>Email</LabelForm>\n      <Input type=\"email\" name=\"email\" />\n      <LabelForm>Password</LabelForm>\n      <Input type=\"password\" name=\"password\" />\n      <Button type=\"submit\">Register</Button>\n    </StyledForm>\n    </Container>\n\n  );\n};\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm /> \n    </div>\n  );\n}\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\n// Utility to add JWT\nconst setAuthHeader = token => {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  };\n  \n  // Utility to remove JWT\n  const clearAuthHeader = () => {\n    axios.defaults.headers.common.Authorization = '';\n  };\n\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n */\nexport const register = createAsyncThunk(\n    'auth/register',\n    async (credentials, thunkAPI) => {\n      try {\n        const res = await axios.post('/users/signup', credentials);\n        // After successful registration, add the token to the HTTP header\n        setAuthHeader(res.data.token);\n        return res.data;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.message);\n      }\n    }\n  );\n\n  /*\n * POST @ /users/login\n * body: { email, password }\n */\nexport const logIn = createAsyncThunk(\n    'auth/login',\n    async (credentials, thunkAPI) => {\n      try {\n        const res = await axios.post('/users/login', credentials);\n        // After successful login, add the token to the HTTP header\n        setAuthHeader(res.data.token);\n        return res.data;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.message);\n      }\n    }\n  );\n  \n  /*\n   * POST @ /users/logout\n   * headers: Authorization: Bearer token\n   */\n  export const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n    try {\n      await axios.post('/users/logout');\n      // After a successful logout, remove the token from the HTTP header\n      clearAuthHeader();\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  \n  /*\n   * GET @ /users/current\n   * headers: Authorization: Bearer token\n   */\n  export const refreshUser = createAsyncThunk(\n    'auth/refresh',\n    async (_, thunkAPI) => {\n      // Reading the token from the state via getState()\n      const state = thunkAPI.getState();\n      const persistedToken = state.auth.token;\n  \n      if (persistedToken === null) {\n        // If there is no token, exit without performing any request\n        return thunkAPI.rejectWithValue('Unable to fetch user');\n      }\n  \n      try {\n        // If there is a token, add it to the HTTP header and perform the request\n        setAuthHeader(persistedToken);\n        const res = await axios.get('/users/me');\n        return res.data;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error.message);\n      }\n    }\n  );\n  "],"names":["Container","styled","StyledForm","Input","LabelForm","Button","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","autoComplete","type","Register","Helmet","axios","setAuthHeader","token","createAsyncThunk","credentials","thunkAPI","res","data","rejectWithValue","message","logIn","_","state","getState","persistedToken","auth"],"sourceRoot":""}